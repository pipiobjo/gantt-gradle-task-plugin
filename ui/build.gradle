buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
 
    }
}



plugins {
    id "com.github.node-gradle.node" version "2.2.1"
}

 
apply plugin: 'base'


node {
    version = '13.7.0'
    npmVersion = '6.13.6'
    download = true
}


//TODO check docu here https://github.com/node-gradle/gradle-node-plugin/blob/master/docs/node.md

npm_run_build {
    // make sure the build task is executed only when appropriate files change
//    inputs.files fileTree('public')
    inputs.files fileTree('src')

    // 'node_modules' appeared not reliable for dependency change detection (the task was rerun without changes)
    // though 'package.json' and 'package-lock.json' should be enough anyway
    inputs.file 'package.json'
    inputs.file 'package-lock.json'

    outputs.dir 'build/dist'
}

// pack output of the build into JAR file
task packageNpmApp(type: Zip) {
    dependsOn npm_run_build
    baseName "${rootProject.name}-${project.name}"
    extension 'jar'
    destinationDir file("${buildDir}/libs")
    from('build/dist') {
        // optional path under which output will be visible in Java classpath, e.g. static resources path
        into 'static'
    }
}

// declare a dedicated scope for publishing the packaged JAR
configurations {
    npmResources
}


configurations.default.extendsFrom(configurations.npmResources)

// expose the artifact created by the packaging task
artifacts {
    npmResources(packageNpmApp.archiveFile) {
        builtBy packageNpmApp
        type 'zip'
    }
}

assemble.dependsOn packageNpmApp

//String testsExecutedMarkerName = "${projectDir}/.tests.executed"
//
//task test(type: NpmTask) {
//    dependsOn assemble
//
//    // force Jest test runner to execute tests once and finish the process instead of starting watch mode
//    environment CI: 'true'
//
//    args = ['run', 'test']
//
//    inputs.files fileTree('src')
//    inputs.file 'package.json'
//    inputs.file 'package-lock.json'
//
//    // allows easy triggering re-tests
//    doLast {
//        new File(testsExecutedMarkerName).text = 'delete this file to force re-execution JavaScript tests'
//    }
//    outputs.file testsExecutedMarkerName
//}

//check.dependsOn test

clean {
    delete packageNpmApp.archiveFile
//    delete testsExecutedMarkerName
}


